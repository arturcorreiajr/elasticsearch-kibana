---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: elastic
  name: apm-server-config
  labels:
    app: apm-server
data:
  apm-server.yml: |-
    apm-server:
      host: "0.0.0.0:8200"
      #secret_token: cXlHdzE0TUJkakZBUk9CTmVwZzI6MVlZdklSWHNUUXE5alQyZkhWMFV2QQ==
      ilm:
        enabled: "true"
        setup:
          enabled: true
          overwrite: false
          # Set `require_policy` to `false` when policies are set up outside of APM Server but referenced here.
          # Default value is `true`.
          require_policy: true
          mapping:
            - event_type: "error"
              policy_name: "apm-rollover-7-days"
              index_suffix: ""
            - event_type: "span"
              policy_name: "apm-rollover-7-days"
              index_suffix: ""
            - event_type: "transaction"
              policy_name: "apm-rollover-7-days"
              index_suffix: ""
            - event_type: "metric"
              policy_name: "apm-rollover-7-days"
              index_suffix: ""
            # - event_type: "onboarding"
            #   policy_name: "apm-rollover-7-days"
            #   index_suffix: ""
        # Configured policies are added to pre-defined default policies.
          policies:
            - name: "apm-rollover-7-days"
              policy:
                phases:
                  hot:
                    actions:
                      rollover:
                        max_size: "10gb"
                        max_age: "3d"
                      set_priority:
                        priority: 100
                  warm:
                    min_age: "5d"
                    actions:
                      set_priority:
                        priority: 50
                      readonly: {}
                  cold:
                    min_age: "7d"
                    actions:
                      set_priority:
                        priority: 0
                      freeze: {}
                  delete:
                    min_age: "10d"
                    actions:
                      delete: {}

    #apm-server.auth.api_key.enabled: "true"

    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}']
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}

    setup.kibana:
      host: '${KIBANA_HOST:kibana}:${KIBANA_PORT:5601}'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: elastic
  name: apm-server
  labels:
    app: apm-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apm-server
  template:
    metadata:
      labels:
        app: apm-server
    spec:
      containers:
      - name: apm-server
        image: docker.elastic.co/apm/apm-server:7.8.0
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: ELASTICSEARCH_HOST
          value: http://elasticsearch-es-http.elastic.svc.cluster.local
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_USERNAME
          value: elastic
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-es-elastic-user
              key: elastic
        - name: KIBANA_HOST
          value: http://kibana-kb-http.elastic.svc.cluster.local
        - name: KIBANA_PORT
          value: "5601"
        ports:
        - containerPort: 8200
          name: apm-server
        volumeMounts:
        - name: config
          mountPath: /usr/share/apm-server/apm-server.yml
          readOnly: true
          subPath: apm-server.yml
      volumes:
      - name: config
        configMap:
          name: apm-server-config
---
apiVersion: v1
kind: Service
metadata:
  namespace: elastic
  name: apm-server
  labels:
    app: apm-server
spec:
  ports:
  - port: 8200
    name: apm-server
  selector:
    app: apm-server

